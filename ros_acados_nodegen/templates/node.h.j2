#ifndef {{ ros.node_name | upper }}_H
#define {{ ros.node_name | upper }}_H

#include <rclcpp/rclcpp.hpp>
#include <mutex>
#include <array>
#include <vector>
#include <unordered_map>

// ROS2 message includes 
{% if package.with_markers == true %}
#include "visualization_msgs/msg/marker_array.hpp"
{% endif %}
{% set unique_headers = namespace(seen=[]) %}
{% for item in ros.subscribers + ros.publishers %}
    {% if item.msg_type and item.msg_type != 'None' %}
        {% set header_path = include_path(item.msg_type) %}
        {% if header_path not in unique_headers.seen %}
#include "{{ header_path }}"
            {% set unique_headers.seen = unique_headers.seen + [header_path] %}
        {% endif %}
    {% endif %}
{% endfor %}

// Acados includes
#include "acados/utils/print.h"
#include "acados/utils/math.h"
#include "acados/ocp_nlp/ocp_nlp_sqp_rti.h"
#include "acados/ocp_nlp/ocp_nlp_common.h"
#include "acados_c/ocp_nlp_interface.h"
#include "acados_c/external_function_interface.h"
#include "blasfeo_d_aux_ext_dep.h"
#include "acados_solver_{{ acados.model.name }}.h"

// Package includes
#include "{{ package.name }}/utils.hpp"
#include "{{ package.name }}/config.hpp"
{% if package.with_markers == true %}
#include "{{ package.name }}/marker_publisher.hpp"
{% endif %}


namespace {{ package.name }}
{

{% set ClassName = ros.node_name | replace('_', ' ') | title | replace(' ', '') %}
{% set has_slack = namespace(v=False) %}
{% for _, p in acados.slacks.items() %}
    {% if p.value %}
        {% set has_slack.v = True %}
    {% endif %}
{% endfor %}
{% set has_init = namespace(v=False) %}
{% set has_term = namespace(v=False) %}
{% for _, p in acados.constraints.items() %}
    {% if p.value and p.name.endswith('_0') %}
        {% set has_init.v = True %}
    {% elif p.value and p.name.endswith('_e') %}
        {% set has_term.v = True %}
    {% endif %}
{% endfor %}
class {{ ClassName }} : public rclcpp::Node {
private:
    // --- ROS Subscriptions ---
    {# subscriptions from config #}
    {% for sub in ros.subscribers %}
        {% if sub.msg_type is not none and sub.msg_type != 'None' %}
    rclcpp::Subscription<{{ cpp_type(sub.msg_type) }}>::SharedPtr {{ (sub.name | lower | replace(' ', '_')) }}_sub_;
        {% endif %}
    {% endfor %}

    // --- ROS ros.Publishers ---
    {# ros.publishers from config #}
    {% for pub in ros.publishers %}
        {% if pub.msg_type is not none and pub.msg_type != 'None' %}
    rclcpp::Publisher<{{ cpp_type(pub.msg_type) }}>::SharedPtr {{ (pub.name | lower | replace(' ', '_')) }}_pub_;
        {% endif %}
    {% endfor %}
    {% if package.with_markers == true %}
    rclcpp::Publisher<visualization_msgs::msg::MarkerArray>::SharedPtr marker_pub_;
    {% endif %}
    rclcpp::TimerBase::SharedPtr control_timer_;
    OnSetParametersCallbackHandle::SharedPtr param_callback_handle_;
    using ParamHandler = std::function<void(const rclcpp::Parameter&, rcl_interfaces::msg::SetParametersResult&)>;
    std::unordered_map<std::string, ParamHandler> parameter_handlers_;
    
    // --- Acados Solver ---
    {{ acados.model.name }}_solver_capsule *ocp_capsule_;
    ocp_nlp_config* ocp_nlp_config_;
    ocp_nlp_dims* ocp_nlp_dims_;
    ocp_nlp_in* ocp_nlp_in_;
    ocp_nlp_out* ocp_nlp_out_;
    void* ocp_nlp_opts_;

    // --- Daten und Zust√§nde ---
    std::mutex data_mutex_;
    {{ ClassName }}Config config_;
    bool first_solve_;
    std::array<double, {{ acados.model.name | upper }}_NU> u0_default_;
    std::array<double, {{ acados.model.name | upper }}_NX> current_x_;
    {% if acados.references.yref_0.value %}
    std::array<double, {{ acados.model.name | upper }}_NY0> current_yref_0_;
    {% endif %}
    {% if acados.references.yref.value %}
    std::array<double, {{ acados.model.name | upper }}_NY> current_yref_;
    {% endif %}
    {% if acados.references.yref_e.value %}
    std::array<double, {{ acados.model.name | upper }}_NYN> current_yref_e_;
    {% endif %}
    {% if acados.parameter_values.value %}
    std::array<double, {{ acados.model.name | upper }}_NP> current_p_;
    {% endif %}

public:
    {{ ClassName }}();
    ~{{ ClassName }}();

private:
    // --- Core Methods ---
    void initialize_solver();
    void control_loop();

    // --- ROS Callbacks ---
    {% for sub in ros.subscribers %}
        {% if sub.msg_type is not none and sub.msg_type != 'None' %}
    void {{ sub.callback | default((sub.name ~ '_callback')) }}(const {{ cpp_type(sub.msg_type) }}::SharedPtr msg);
        {% endif %}
    {% endfor %}

    // --- ROS Publisher ---
    void publish_input(const std::array<double, {{ acados.model.name | upper }}_NU>& u0);

    // --- Parameter Handling Methods ---
    void setup_parameter_handlers();
    void declare_parameters();
    void load_parameters();
    void log_parameters();
    rcl_interfaces::msg::SetParametersResult on_parameter_update(const std::vector<rclcpp::Parameter>& params);
    {% if package.with_markers == true %}

    // --- ROS Visualizer ---
    void visualize_markers();
    {% endif %}

    // --- Helpers ---
    void start_control_timer(double rate_hz = 50.0);

    // --- Acados Helpers ---
    {% if acados.solver.nlp_solver_type == "SQP_RTI" %}
    int prepare_rti_solve();
    int feedback_rti_solve();
    {% else %}
    int ocp_solve();
    {% endif %}

    void get_input(double* u, int stage);
    void get_state(double* x, int stage);
    
    void set_cost_weights();
    {% if has_slack.v %}
    void set_slack_weights();
    {% endif %}
    void set_constraints();
    void set_x0(double* x0);
    void set_yref0(double* yref0);
    void set_yref(double* yref, int stage);
    void set_yref_e(double* yref);
    void set_yrefs(double* yref);
    {% if acados.parameter_values.value %}
    void set_ocp_parameter(double* p, size_t np, int stage);
    void set_ocp_parameters(double* p, size_t np);
    {% endif %}
    {% if acados.solver.warmstart or acados.solver.warmstart_first %}

    void warmstart_inputs(double* u0);
    void warmstart_states(double* x0);
    {% endif %}
};

} // namespace {{ package.name }}

#endif // {{ ros.node_name | upper }}_H